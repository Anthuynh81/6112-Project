{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\Chart2.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { filter } from 'topojson-simplify';\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const data = this.props;\n    const geoData = d3.json(\"https://gist.githubusercontent.com/mheydt/29eec003a4c0af362d7a/raw/d27d143bd75626647108fc514d8697e0814bf74b/us-states.json\");\n    const width = 1400;\n    const height = 600;\n    const rateType = \"Confirmed\";\n    const projection = d3.geoAlbersUsa().translate([width / 2, height / 2]).scale([1280]);\n    const path = d3.geoPath().projection(projection);\n    const accessToChartRef = d3.select(this.chartRef.current).append(\"SVG\");\n    /*let allStats = data.map(function (row, i) {\r\n        return {\r\n            Updated: row.Updated,\r\n            Country_Region: row.Country_Region,\r\n            Confirmed: row.Confirmed,\r\n            ConfirmedChange: row.ConfirmedChange,\r\n            Deaths: row.Deaths,\r\n            DeathsChange: row.DeathsChange,\r\n        };\r\n    });*/\n\n    const dataParse = d3.utcParse(\"%m/%d/%Y\");\n    const startDate = dataParse(\"01/21/2020\");\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    /*var date = new Date(+startDate + millisecondsPerDay * 1);\r\n    const stats = allStats.filter(function (row, i) {\r\n        return + row.Updated === +date;\r\n    });*/\n\n    const valRange = [0, 5500000, 8500000];\n    const colormap = d3.scaleLinear().domain(valRange).range([\"blue\", \"#eeeeee\", \"red\"]);\n    accessToChartRef.append(\"g\").attr(\"class\", \"states\").attr(\"class\", \"state-borders\").selectAll(\"path\").data(geoData.filter(function (d) {\n      return d.properties.name !== \"Puerto Rico\";\n    })).enter().append(\"path\").attr(\"d\", path);\n    /*accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\r\n        const metrics = getStateMetrics(stats, d.properties.name);\r\n        if (metrics === undefined) return \"#ddd\";\r\n        const rate = getStateMetrics(stats, d.properties.name)[rateType];\r\n        return colormap(rate);\r\n    });*/\n\n    function getStateMetrics(stats, state_name) {\n      for (var i = 0; i < stats.length; i++) {\n        if (stats[i].Country_Region == state_name) {\n          return stats[i];\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: this.chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n    /*<div>\r\n        <div ref={this.chartRef}></div>\r\n        <div id=\"slidecontainer\">\r\n            <div ref={this.sliderRef}/>\r\n            <h3>{this.state.slider}</h3>\r\n            <span id=\"date\"></span>\r\n        </div>\r\n    </div>*/\n    ;\n  }\n\n}\n\nexport default Chart2;\n/*\r\nconst accessToSliderRef = d3.select(this.sliderRef.current)\r\n    .append(\"input\")\r\n    .attr(\"id\", \"slider\")\r\n    .attr(\"type\", \"range\")\r\n    .attr(\"min\", 0)\r\n    .attr(\"max\", 50)\r\n    .attr(\"step\", 1)\r\n    .attr(\"value\", this.state.slider)\r\n    .attr(\"class\", \"slider\");*/","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/Chart2.js"],"names":["React","Component","d3","filter","render","Chart2","constructor","props","chartRef","createRef","componentDidMount","data","geoData","json","width","height","rateType","projection","geoAlbersUsa","translate","scale","path","geoPath","accessToChartRef","select","current","append","dataParse","utcParse","startDate","millisecondsPerDay","valRange","colormap","scaleLinear","domain","range","attr","selectAll","d","properties","name","enter","getStateMetrics","stats","state_name","i","length","Country_Region"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,MAAT,QAAuB,wBAAvB;;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AACvBK,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AACGC,EAAAA,iBAAiB,GAAI;AACrB,UAAMC,IAAI,GAAG,KAAKJ,KAAlB;AAEA,UAAMK,OAAO,GAAGV,EAAE,CAACW,IAAH,CAAQ,4HAAR,CAAhB;AAGI,UAAMC,KAAK,GAAG,IAAd;AACJ,UAAMC,MAAM,GAAG,GAAf;AACA,UAAMC,QAAQ,GAAG,WAAjB;AAIA,UAAMC,UAAU,GAAGf,EAAE,CAChBgB,YADc,GAEdC,SAFc,CAEJ,CAACL,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAFI,EAGdK,KAHc,CAGR,CAAC,IAAD,CAHQ,CAAnB;AAIA,UAAMC,IAAI,GAAGnB,EAAE,CAACoB,OAAH,GAAaL,UAAb,CAAwBA,UAAxB,CAAb;AAEA,UAAMM,gBAAgB,GAAGrB,EAAE,CAACsB,MAAH,CAAU,KAAKhB,QAAL,CAAciB,OAAxB,EACpBC,MADoB,CACb,KADa,CAAzB;AAGA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,UAAMC,SAAS,GAAGzB,EAAE,CAAC0B,QAAH,CAAY,UAAZ,CAAlB;AACA,UAAMC,SAAS,GAAGF,SAAS,CAAC,YAAD,CAA3B;AACA,UAAMG,kBAAkB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1C;AACA;AACR;AACA;AACA;;AAEQ,UAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,OAAJ,EAAa,OAAb,CAAjB;AACA,UAAMC,QAAQ,GAAG9B,EAAE,CACd+B,WADY,GAEZC,MAFY,CAELH,QAFK,EAGZI,KAHY,CAGN,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB,CAHM,CAAjB;AAKAZ,IAAAA,gBAAgB,CACXG,MADL,CACY,GADZ,EAEKU,IAFL,CAEU,OAFV,EAEmB,QAFnB,EAGKA,IAHL,CAGU,OAHV,EAGmB,eAHnB,EAIKC,SAJL,CAIe,MAJf,EAKK1B,IALL,CAMQC,OAAO,CAACT,MAAR,CAAe,UAAUmC,CAAV,EAAa;AACxB,aAAOA,CAAC,CAACC,UAAF,CAAaC,IAAb,KAAsB,aAA7B;AACH,KAFD,CANR,EAUKC,KAVL,GAWKf,MAXL,CAWY,MAXZ,EAYKU,IAZL,CAYU,GAZV,EAYef,IAZf;AAcA;AACR;AACA;AACA;AACA;AACA;;AAEQ,aAASqB,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AACxC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAIF,KAAK,CAACE,CAAD,CAAL,CAASE,cAAT,IAA2BH,UAA/B,EAA2C;AACvC,iBAAOD,KAAK,CAACE,CAAD,CAAZ;AACH;AACJ;AACJ;AACJ;;AAMDzC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,GAAG,EAAE,KAAKI;AAAf;AAAA;AAAA;AAAA;AAAA;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AATQ;AAWH;;AAjG0B;;AAqG/B,eAAeH,MAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { filter } from 'topojson-simplify';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Chart2 extends Component {\r\n        constructor(props){\r\n        super(props)\r\n        this.chartRef = React.createRef();\r\n    }\r\n        componentDidMount () {\r\n        const data = this.props;\r\n\r\n        const geoData = d3.json(\"https://gist.githubusercontent.com/mheydt/29eec003a4c0af362d7a/raw/d27d143bd75626647108fc514d8697e0814bf74b/us-states.json\");\r\n\r\n\r\n            const width = 1400;\r\n        const height = 600;\r\n        const rateType = \"Confirmed\";\r\n\r\n\r\n\r\n        const projection = d3\r\n            .geoAlbersUsa()\r\n            .translate([width / 2, height / 2])\r\n            .scale([1280]);\r\n        const path = d3.geoPath().projection(projection)\r\n\r\n        const accessToChartRef = d3.select(this.chartRef.current)\r\n            .append(\"SVG\")\r\n\r\n        /*let allStats = data.map(function (row, i) {\r\n            return {\r\n                Updated: row.Updated,\r\n                Country_Region: row.Country_Region,\r\n                Confirmed: row.Confirmed,\r\n                ConfirmedChange: row.ConfirmedChange,\r\n                Deaths: row.Deaths,\r\n                DeathsChange: row.DeathsChange,\r\n            };\r\n        });*/\r\n\r\n        const dataParse = d3.utcParse(\"%m/%d/%Y\");\r\n        const startDate = dataParse(\"01/21/2020\");\r\n        const millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n        /*var date = new Date(+startDate + millisecondsPerDay * 1);\r\n        const stats = allStats.filter(function (row, i) {\r\n            return + row.Updated === +date;\r\n        });*/\r\n\r\n        const valRange = [0, 5500000, 8500000];\r\n        const colormap = d3\r\n            .scaleLinear()\r\n            .domain(valRange)\r\n            .range([\"blue\", \"#eeeeee\", \"red\"]);\r\n\r\n        accessToChartRef\r\n            .append(\"g\")\r\n            .attr(\"class\", \"states\")\r\n            .attr(\"class\", \"state-borders\")\r\n            .selectAll(\"path\")\r\n            .data(\r\n                geoData.filter(function (d) {\r\n                    return d.properties.name !== \"Puerto Rico\";\r\n                })\r\n            )\r\n            .enter()\r\n            .append(\"path\")\r\n            .attr(\"d\", path);\r\n\r\n        /*accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\r\n            const metrics = getStateMetrics(stats, d.properties.name);\r\n            if (metrics === undefined) return \"#ddd\";\r\n            const rate = getStateMetrics(stats, d.properties.name)[rateType];\r\n            return colormap(rate);\r\n        });*/\r\n\r\n        function getStateMetrics(stats, state_name) {\r\n            for (var i = 0; i < stats.length; i++) {\r\n                if (stats[i].Country_Region == state_name) {\r\n                    return stats[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.chartRef}></div>\r\n            /*<div>\r\n                <div ref={this.chartRef}></div>\r\n                <div id=\"slidecontainer\">\r\n                    <div ref={this.sliderRef}/>\r\n                    <h3>{this.state.slider}</h3>\r\n                    <span id=\"date\"></span>\r\n                </div>\r\n            </div>*/\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Chart2;\r\n\r\n\r\n/*\r\nconst accessToSliderRef = d3.select(this.sliderRef.current)\r\n    .append(\"input\")\r\n    .attr(\"id\", \"slider\")\r\n    .attr(\"type\", \"range\")\r\n    .attr(\"min\", 0)\r\n    .attr(\"max\", 50)\r\n    .attr(\"step\", 1)\r\n    .attr(\"value\", this.state.slider)\r\n    .attr(\"class\", \"slider\");*/\r\n"]},"metadata":{},"sourceType":"module"}