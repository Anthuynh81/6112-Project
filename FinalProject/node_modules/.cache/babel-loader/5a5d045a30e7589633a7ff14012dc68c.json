{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\Chart2.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = /*#__PURE__*/React.createRef();\n    this.sliderRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const data = [12, 36, 55, 25, 35, 10, 40];\n    const width = 1400;\n    const height = 600;\n    const niceFormat = d3.utcFormat(\"%B %d, %Y\");\n    const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\n    const dataParse = d3.utcParse(\"%m/%d/%Y\");\n    const startDate = dataParse(\"01/21/2020\");\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const valRange = [0, 5500000, 8500000];\n    const rateType = \"Confirmed\"; //const {data, chartType, slider} = this.props;\n\n    const colormap = d3.scaleLinear().domain(valRange).range([\"blue\", \"#eeeeee\", \"red\"]);\n    const accessToSliderRef = d3.select(this.sliderRef.current).append(\"input\").attr(\"id\", \"slider\").attr(\"type\", \"range\").attr(\"min\", 0).attr(\"step\", 1).attr(\"value\", 0).attr(\"class\", \"slider\");\n    let allStats;\n    /*\r\n            accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n                var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n                update(date);\r\n            });\r\n    */\n\n    const accessToChartRef = d3.select(this.chartRef.current).append(\"svg\");\n    Promise.all([d3.json(\"custom.geo.json\"), d3.csv(\"usa_only.csv\")]).then(ready);\n\n    function ready(data) {\n      const us = data[0];\n      allStats = data[1].map(function (row, i) {\n        return {\n          Updated: dataParse(row.Updated),\n          Country_Region: row.Country_Region,\n          Confirmed: row.Confirmed,\n          ConfirmedChange: row.ConfirmedChange,\n          Deaths: row.Deaths,\n          DeathsChange: row.DeathsChange\n        };\n      });\n      const availableDays = (d3.max(allStats, function (d) {\n        return d.Updated;\n      }) - startDate) / millisecondsPerDay;\n      accessToSliderRef.attr(\"max\", Math.round(availableDays));\n      render(us);\n      update(startDate);\n    }\n\n    function update(date) {\n      const stats = allStats.filter(function (row, i) {\n        return +row.Updated === +date;\n      });\n      d3.select(\"#date\").text(niceFormat(date));\n      /*tool_tip.html(function (d, i) {\r\n          const stateMetrics = getStateMetrics(stats, d.properties.name);\r\n          let html =\r\n              \"<table>\" +\r\n              \"<tr><th>Confirmed Cases:</th><td>\" +\r\n              stateMetrics.Confirmed +\r\n              \"</td></tr>\" +\r\n                \"<tr><th>Changes in Confirmed Cases:</th><td>\" +\r\n              stateMetrics.ConfirmedChange +\r\n              \"</td></tr>\" +\r\n                \"<tr><th>Deaths:</th><td>\" +\r\n              stateMetrics.Deaths +\r\n              \"</td></tr>\" +\r\n                \"<tr><th>Changes in Deaths :</th><td>\" +\r\n              stateMetrics.DeathsChange +\r\n              \"</td></tr>\" +\r\n              \"</table>\";\r\n          return html;\r\n      });*/\n\n      accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\n        const metrics = getStateMetrics(stats, d.properties.name);\n        if (metrics === undefined) return \"#ddd\";\n        const rate = getStateMetrics(stats, d.properties.name)[rateType];\n        return colormap(rate);\n      });\n    }\n\n    ;\n\n    function getStateMetrics(stats, state_name) {\n      for (var i = 0; i < stats.length; i++) {\n        if (stats[i].Country_Region == state_name) {\n          return stats[i];\n        }\n      }\n    }\n\n    function render(us) {\n      const projection = d3.geoAlbersUsa().translate([width / 2, height / 2]).scale([1280]);\n      const path = d3.geoPath().projection(projection);\n      accessToChartRef.append(\"g\").attr(\"class\", \"states\").attr(\"class\", \"state-borders\").selectAll(\"path\").data(us.features.filter(function (d) {\n        return d.properties.name !== \"Puerto Rico\";\n      })).enter().append(\"path\").attr(\"d\", path);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"slidecontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: this.sliderRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chart2;","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/Chart2.js"],"names":["React","Component","d3","render","Chart2","constructor","props","chartRef","createRef","sliderRef","componentDidMount","data","width","height","niceFormat","utcFormat","dataFormat","dataParse","utcParse","startDate","millisecondsPerDay","valRange","rateType","colormap","scaleLinear","domain","range","accessToSliderRef","select","current","append","attr","allStats","accessToChartRef","Promise","all","json","csv","then","ready","us","map","row","i","Updated","Country_Region","Confirmed","ConfirmedChange","Deaths","DeathsChange","availableDays","max","d","Math","round","update","date","stats","filter","text","selectAll","metrics","getStateMetrics","properties","name","undefined","rate","state_name","length","projection","geoAlbersUsa","translate","scale","path","geoPath","features","enter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Chart2 extends Component {\r\n        constructor(props){\r\n        super(props)\r\n        this.chartRef = React.createRef();\r\n        this.sliderRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n\r\n        const data = [12,36,55,25,35,10,40];\r\n\r\n        const width = 1400;\r\n        const height = 600;\r\n        \r\n        const niceFormat = d3.utcFormat(\"%B %d, %Y\");\r\n        const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\r\n        const dataParse = d3.utcParse(\"%m/%d/%Y\");\r\n\r\n        const startDate = dataParse(\"01/21/2020\");\r\n        const millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n        const valRange = [0, 5500000, 8500000];\r\n        const rateType = \"Confirmed\";\r\n        //const {data, chartType, slider} = this.props;\r\n\r\n        const colormap = d3\r\n            .scaleLinear()\r\n            .domain(valRange)\r\n            .range([\"blue\", \"#eeeeee\", \"red\"]);\r\n\r\n        const accessToSliderRef = d3.select(this.sliderRef.current)\r\n            .append(\"input\")\r\n            .attr(\"id\", \"slider\")\r\n            .attr(\"type\", \"range\")\r\n            .attr(\"min\", 0)\r\n            .attr(\"step\", 1)\r\n            .attr(\"value\", 0)\r\n            .attr(\"class\", \"slider\");\r\n\r\n        let allStats;\r\n\r\n/*\r\n        accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n            var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n            update(date);\r\n        });\r\n*/\r\n\r\n        const accessToChartRef = d3.select(this.chartRef.current)\r\n            .append(\"svg\")\r\n\r\n        Promise.all([\r\n            d3.json(\r\n                \"custom.geo.json\"\r\n            ),\r\n            d3.csv(\"usa_only.csv\")\r\n        ]).then(ready);\r\n\r\n        function ready(data) {\r\n\r\n            const us = data[0];\r\n\r\n            allStats = data[1].map(function (row, i) {\r\n                return {\r\n                    Updated: dataParse(row.Updated),\r\n                    Country_Region: row.Country_Region,\r\n                    Confirmed: row.Confirmed,\r\n                    ConfirmedChange: row.ConfirmedChange,\r\n                    Deaths: row.Deaths,\r\n                    DeathsChange: row.DeathsChange,\r\n                };\r\n            });\r\n\r\n            const availableDays =\r\n                (d3.max(allStats, function (d) {\r\n                        return d.Updated;\r\n                    }) -\r\n                    startDate) /\r\n                millisecondsPerDay;\r\n            accessToSliderRef.attr(\"max\", Math.round(availableDays));\r\n\r\n            render(us);\r\n            update(startDate);\r\n        }\r\n        function update(date) {\r\n            const stats = allStats.filter(function (row, i) {\r\n                return +row.Updated === +date;\r\n            });\r\n\r\n            d3.select(\"#date\").text(niceFormat(date));\r\n\r\n            /*tool_tip.html(function (d, i) {\r\n                const stateMetrics = getStateMetrics(stats, d.properties.name);\r\n                let html =\r\n                    \"<table>\" +\r\n                    \"<tr><th>Confirmed Cases:</th><td>\" +\r\n                    stateMetrics.Confirmed +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Changes in Confirmed Cases:</th><td>\" +\r\n                    stateMetrics.ConfirmedChange +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Deaths:</th><td>\" +\r\n                    stateMetrics.Deaths +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Changes in Deaths :</th><td>\" +\r\n                    stateMetrics.DeathsChange +\r\n                    \"</td></tr>\" +\r\n                    \"</table>\";\r\n                return html;\r\n            });*/\r\n\r\n            accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\r\n                const metrics = getStateMetrics(stats, d.properties.name);\r\n                if (metrics === undefined) return \"#ddd\";\r\n                const rate = getStateMetrics(stats, d.properties.name)[rateType];\r\n                return colormap(rate);\r\n            });\r\n        };\r\n\r\n        function getStateMetrics(stats, state_name) {\r\n            for (var i = 0; i < stats.length; i++) {\r\n                if (stats[i].Country_Region == state_name) {\r\n                    return stats[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        function render(us) {\r\n            const projection = d3\r\n                .geoAlbersUsa()\r\n                .translate([width / 2, height / 2])\r\n                .scale([1280]);\r\n\r\n            const path = d3.geoPath().projection(projection);\r\n\r\n            accessToChartRef\r\n                .append(\"g\")\r\n                .attr(\"class\", \"states\")\r\n                .attr(\"class\", \"state-borders\")\r\n                .selectAll(\"path\")\r\n                .data(\r\n                    us.features.filter(function (d) {\r\n                        return d.properties.name !== \"Puerto Rico\";\r\n                    })\r\n                )\r\n                .enter()\r\n                .append(\"path\")\r\n                .attr(\"d\", path);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={this.chartRef}></div>\r\n                <div id=\"slidecontainer\">\r\n                    <div ref={this.sliderRef}/>\r\n                    <span id=\"date\"></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}