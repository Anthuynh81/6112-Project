{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\Chart2.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = /*#__PURE__*/React.createRef();\n    this.sliderRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      slider: 0\n    };\n  }\n\n  componentDidMount() {\n    const data = [12, 36, 55, 25, 35, 10, 40];\n    const width = 1400;\n    const height = 600;\n    const niceFormat = d3.utcFormat(\"%B %d, %Y\");\n    const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\n    const dataParse = d3.utcParse(\"%m/%d/%Y\");\n    const startDate = dataParse(\"01/21/2020\");\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const valRange = [0, 5500000, 8500000];\n    const rateType = \"Confirmed\";\n    const projection = d3.geoAlbersUsa().translate([width / 2, height / 2]).scale([1280]);\n    const path = d3.geoPath().projection(projection); //const {data, chartType, slider} = this.props;\n\n    const accessToChartRef = d3.select(this.chartRef.current).append(\"SVG\");\n    const accessToSliderRef = d3.select(this.sliderRef.current).append(\"input\").attr(\"id\", \"slider\").attr(\"type\", \"range\").attr(\"min\", 0).attr(\"max\", 50).attr(\"step\", 1).attr(\"value\", this.state.slider).attr(\"class\", \"slider\");\n    accessToSliderRef.on(\"input\", function () {\n      setState;\n    });\n    accessToChartRef.append(\"g\").attr(\"class\", \"states\").attr(\"class\", \"state-borders\").selectAll(\"path\").enter().append(\"path\").attr(\"d\", path);\n    /*\r\n            accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n                var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n                update(date);\r\n            });\r\n    */\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"slidecontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: this.sliderRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.slider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chart2;","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/Chart2.js"],"names":["React","Component","d3","render","Chart2","constructor","props","chartRef","createRef","sliderRef","state","slider","componentDidMount","data","width","height","niceFormat","utcFormat","dataFormat","dataParse","utcParse","startDate","millisecondsPerDay","valRange","rateType","projection","geoAlbersUsa","translate","scale","path","geoPath","accessToChartRef","select","current","append","accessToSliderRef","attr","on","setState","selectAll","enter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Chart2 extends Component {\r\n        constructor(props){\r\n        super(props)\r\n        this.chartRef = React.createRef();\r\n        this.sliderRef = React.createRef();\r\n        this.state = {\r\n            slider: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n\r\n        const data = [12,36,55,25,35,10,40];\r\n\r\n        const width = 1400;\r\n        const height = 600;\r\n\r\n        const niceFormat = d3.utcFormat(\"%B %d, %Y\");\r\n        const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\r\n        const dataParse = d3.utcParse(\"%m/%d/%Y\");\r\n\r\n        const startDate = dataParse(\"01/21/2020\");\r\n        const millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n        const valRange = [0, 5500000, 8500000];\r\n        const rateType = \"Confirmed\";\r\n\r\n        const projection = d3\r\n            .geoAlbersUsa()\r\n            .translate([width / 2, height / 2])\r\n            .scale([1280]);\r\n        const path = d3.geoPath().projection(projection)\r\n        //const {data, chartType, slider} = this.props;\r\n\r\n        const accessToChartRef = d3.select(this.chartRef.current)\r\n            .append(\"SVG\")\r\n\r\n        const accessToSliderRef = d3.select(this.sliderRef.current)\r\n            .append(\"input\")\r\n            .attr(\"id\", \"slider\")\r\n            .attr(\"type\", \"range\")\r\n            .attr(\"min\", 0)\r\n            .attr(\"max\", 50)\r\n            .attr(\"step\", 1)\r\n            .attr(\"value\", this.state.slider)\r\n            .attr(\"class\", \"slider\");\r\n\r\n        accessToSliderRef.on(\"input\", function() {\r\n            setState\r\n        })\r\n\r\n        accessToChartRef\r\n            .append(\"g\")\r\n            .attr(\"class\", \"states\")\r\n            .attr(\"class\", \"state-borders\")\r\n            .selectAll(\"path\")\r\n            .enter()\r\n            .append(\"path\")\r\n            .attr(\"d\", path);\r\n/*\r\n        accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n            var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n            update(date);\r\n        });\r\n*/\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={this.chartRef}></div>\r\n                <div id=\"slidecontainer\">\r\n                    <div ref={this.sliderRef}/>\r\n                    <h3>{this.state.slider}</h3>\r\n                    <span id=\"date\"></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}