{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\Chart2.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { render } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = /*#__PURE__*/React.createRef();\n    this.sliderRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const data = [12, 36, 55, 25, 35, 10, 40];\n    const w = 500;\n    const h = 400;\n    const niceFormat = d3.utcFormat(\"%B %d, %Y\");\n    const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\n    const dataParse = d3.utcParse(\"%m/%d/%Y\");\n    const startDate = dataParse(\"01/21/2020\");\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const valRange = [0, 5500000, 8500000];\n    const rateType = \"Confirmed\"; //const {data, chartType, slider} = this.props;\n\n    const colormap = d3.scaleLinear().domain(valRange).range([\"blue\", \"#eeeeee\", \"red\"]);\n    const accessToSliderRef = d3.select(this.sliderRef.current).append(\"input\").attr(\"id\", \"slider\").attr(\"type\", \"range\").attr(\"min\", 0).attr(\"step\", 1).attr(\"value\", 0).attr(\"class\", \"slider\");\n    let allStats;\n    /*\r\n            accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n                var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n                update(date);\r\n            });\r\n    */\n\n    const accessToChartRef = d3.select(this.chartRef.current).append(\"svg\").attr(\"width\", w).attr(\"height\", h).style(\"background-color\", \"#cccccc\").style(\"padding\", 10).style(\"margin-left\", 50);\n    accessToChartRef.selectAll(\"rect\").data(data).enter().append(\"rect\").attr(\"x\", (d, i) => i * 70).attr(\"y\", (d, i) => h - 10 * d).attr(\"width\", 65).attr(\"height\", (d, i) => d * 10).attr(\"fill\", (d, i) => d > 35 ? \"tomato\" : \"yellow\");\n    Promise.all([d3.json(\"custom.geo.json\"), d3.csv(\"usa_only.csv\")]).then(ready);\n\n    function ready(data) {\n      const us = data[0];\n      allStats = data[1].map(function (row, i) {\n        return {\n          Updated: dataParse(row.Updated),\n          Country_Region: row.Country_Region,\n          Confirmed: row.Confirmed,\n          ConfirmedChange: row.ConfirmedChange,\n          Deaths: row.Deaths,\n          DeathsChange: row.DeathsChange\n        };\n      });\n      const availableDays = (d3.max(allStats, function (d) {\n        return d.Updated;\n      }) - startDate) / millisecondsPerDay;\n      accessToSliderRef.attr(\"max\", Math.round(availableDays));\n      render(us);\n      update(startDate);\n    }\n\n    function update(date) {\n      const stats = allStats.filter(function (row, i) {\n        return +row.Updated === +date;\n      });\n      d3.select(\"#date\").text(niceFormat(date));\n      tool_tip.html(function (d, i) {\n        const stateMetrics = getStateMetrics(stats, d.properties.name);\n        let html = \"<table>\" + \"<tr><th>Confirmed Cases:</th><td>\" + stateMetrics.Confirmed + \"</td></tr>\" + \"<tr><th>Changes in Confirmed Cases:</th><td>\" + stateMetrics.ConfirmedChange + \"</td></tr>\" + \"<tr><th>Deaths:</th><td>\" + stateMetrics.Deaths + \"</td></tr>\" + \"<tr><th>Changes in Deaths :</th><td>\" + stateMetrics.DeathsChange + \"</td></tr>\" + \"</table>\";\n        return html;\n      });\n      accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\n        const metrics = getStateMetrics(stats, d.properties.name);\n        if (metrics === undefined) return \"#ddd\";\n        const rate = getStateMetrics(stats, d.properties.name)[rateType];\n        return colormap(rate);\n      });\n    }\n\n    ;\n\n    function getStateMetrics(stats, state_name) {\n      for (var i = 0; i < stats.length; i++) {\n        if (stats[i].Country_Region == state_name) {\n          return stats[i];\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"slidecontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: this.sliderRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chart2;","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/Chart2.js"],"names":["React","Component","d3","render","Chart2","constructor","props","chartRef","createRef","sliderRef","componentDidMount","data","w","h","niceFormat","utcFormat","dataFormat","dataParse","utcParse","startDate","millisecondsPerDay","valRange","rateType","colormap","scaleLinear","domain","range","accessToSliderRef","select","current","append","attr","allStats","accessToChartRef","style","selectAll","enter","d","i","Promise","all","json","csv","then","ready","us","map","row","Updated","Country_Region","Confirmed","ConfirmedChange","Deaths","DeathsChange","availableDays","max","Math","round","update","date","stats","filter","text","tool_tip","html","stateMetrics","getStateMetrics","properties","name","metrics","undefined","rate","state_name","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Chart2 extends Component {\r\n        constructor(props){\r\n        super(props)\r\n        this.chartRef = React.createRef();\r\n        this.sliderRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n\r\n        const data = [12,36,55,25,35,10,40];\r\n\r\n        const w = 500;\r\n        const h = 400;\r\n\r\n        const niceFormat = d3.utcFormat(\"%B %d, %Y\");\r\n        const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\r\n        const dataParse = d3.utcParse(\"%m/%d/%Y\");\r\n\r\n        const startDate = dataParse(\"01/21/2020\");\r\n        const millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n        const valRange = [0, 5500000, 8500000];\r\n        const rateType = \"Confirmed\";\r\n        //const {data, chartType, slider} = this.props;\r\n\r\n        const colormap = d3\r\n            .scaleLinear()\r\n            .domain(valRange)\r\n            .range([\"blue\", \"#eeeeee\", \"red\"]);\r\n\r\n        const accessToSliderRef = d3.select(this.sliderRef.current)\r\n            .append(\"input\")\r\n            .attr(\"id\", \"slider\")\r\n            .attr(\"type\", \"range\")\r\n            .attr(\"min\", 0)\r\n            .attr(\"step\", 1)\r\n            .attr(\"value\", 0)\r\n            .attr(\"class\", \"slider\");\r\n\r\n        let allStats;\r\n\r\n/*\r\n        accessToSliderRef.select(this.sliderRef.current).on(\"input\", function () {\r\n            var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n            update(date);\r\n        });\r\n*/\r\n\r\n        const accessToChartRef = d3.select(this.chartRef.current)\r\n            .append(\"svg\")\r\n            .attr(\"width\",w)\r\n            .attr(\"height\",h)\r\n            .style(\"background-color\", \"#cccccc\")\r\n            .style(\"padding\", 10)\r\n            .style(\"margin-left\", 50);\r\n\r\n        accessToChartRef.selectAll(\"rect\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", (d,i) => i *70)\r\n            .attr(\"y\", (d,i) => h-10*d)\r\n            .attr(\"width\", 65)\r\n            .attr(\"height\", (d,i) => d*10)\r\n            .attr(\"fill\", (d,i) => d > 35 ? \"tomato\" : \"yellow\");\r\n\r\n        Promise.all([\r\n            d3.json(\r\n                \"custom.geo.json\"\r\n            ),\r\n            d3.csv(\"usa_only.csv\")\r\n        ]).then(ready);\r\n\r\n        function ready(data) {\r\n\r\n            const us = data[0];\r\n\r\n            allStats = data[1].map(function (row, i) {\r\n                return {\r\n                    Updated: dataParse(row.Updated),\r\n                    Country_Region: row.Country_Region,\r\n                    Confirmed: row.Confirmed,\r\n                    ConfirmedChange: row.ConfirmedChange,\r\n                    Deaths: row.Deaths,\r\n                    DeathsChange: row.DeathsChange,\r\n                };\r\n            });\r\n\r\n            const availableDays =\r\n                (d3.max(allStats, function (d) {\r\n                        return d.Updated;\r\n                    }) -\r\n                    startDate) /\r\n                millisecondsPerDay;\r\n            accessToSliderRef.attr(\"max\", Math.round(availableDays));\r\n\r\n            render(us);\r\n            update(startDate);\r\n        }\r\n        function update(date) {\r\n            const stats = allStats.filter(function (row, i) {\r\n                return +row.Updated === +date;\r\n            });\r\n\r\n            d3.select(\"#date\").text(niceFormat(date));\r\n\r\n            tool_tip.html(function (d, i) {\r\n                const stateMetrics = getStateMetrics(stats, d.properties.name);\r\n                let html =\r\n                    \"<table>\" +\r\n                    \"<tr><th>Confirmed Cases:</th><td>\" +\r\n                    stateMetrics.Confirmed +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Changes in Confirmed Cases:</th><td>\" +\r\n                    stateMetrics.ConfirmedChange +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Deaths:</th><td>\" +\r\n                    stateMetrics.Deaths +\r\n                    \"</td></tr>\" +\r\n\r\n                    \"<tr><th>Changes in Deaths :</th><td>\" +\r\n                    stateMetrics.DeathsChange +\r\n                    \"</td></tr>\" +\r\n                    \"</table>\";\r\n                return html;\r\n            });\r\n\r\n            accessToChartRef.selectAll(\"path\").attr(\"fill\", function (d) {\r\n                const metrics = getStateMetrics(stats, d.properties.name);\r\n                if (metrics === undefined) return \"#ddd\";\r\n                const rate = getStateMetrics(stats, d.properties.name)[rateType];\r\n                return colormap(rate);\r\n            });\r\n        };\r\n\r\n        function getStateMetrics(stats, state_name) {\r\n            for (var i = 0; i < stats.length; i++) {\r\n                if (stats[i].Country_Region == state_name) {\r\n                    return stats[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={this.chartRef}></div>\r\n                <div id=\"slidecontainer\">\r\n                    <div ref={this.sliderRef}/>\r\n                    <span id=\"date\"></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}