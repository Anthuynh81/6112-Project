{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\StateChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://gist.githubusercontent.com/mheydt/29eec003a4c0af362d7a/raw/d27d143bd75626647108fc514d8697e0814bf74b/us-states.json\";\nconst startDate = new Date(2020, 0, 23);\n\nconst StateChart = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [date, setDate] = useState(startDate.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  }));\n\n  if (props.date != date) {\n    setDate(props.date);\n    Axios.get(\"http://localhost:5000/State\", {\n      params: {\n        date: date\n      }\n    }).then(response => {\n      setData(response.data);\n      setLoading(false);\n    });\n  }\n  /*   useEffect(() => {\r\n         Axios.get(\"http://localhost:5000/State\", { params: {date: date}}).then((response) =>{\r\n             setData(response.data);\r\n             setLoading(false);\r\n         });\r\n     }, []);*/\n\n\n  if (props.map === \"State\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n        \"data-tip\": \"\",\n        projection: \"geoAlbersUsa\",\n        width: 800,\n        height: 600,\n        children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n          zoom: 1,\n          children: [\">\", /*#__PURE__*/_jsxDEV(Geographies, {\n            geography: geoUrl,\n            children: ({\n              geographies\n            }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n              geography: geo,\n              onMouseEnter: () => {\n                const NAME = geo.properties.name;\n                const state = data.find(o => o.AdminRegion1 === NAME);\n\n                if (loading) {\n                  props.setTooltipContent('Data is loading');\n                } else {\n                  if (state) {\n                    props.setTooltipContent(`${geo.properties.name}</br>\n                                                        Confirmed - ${state.Confirmed}</br>`);\n                  } else {\n                    props.setTooltipContent(`${geo.properties.name}</br>\n                                                        Confirmed - 0</br>`);\n                  }\n                }\n              },\n              onMouseLeave: () => {\n                props.setTooltipContent(\"\");\n              },\n              style: {\n                default: {\n                  fill: \"#D6D6DA\",\n                  outline: \"none\"\n                },\n                hover: {\n                  fill: \"#F53\",\n                  outline: \"none\"\n                },\n                pressed: {\n                  fill: \"#E42\",\n                  outline: \"none\"\n                }\n              }\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  } else {\n    return null;\n  }\n};\n\n_s(StateChart, \"7wxrTuosv2A8MFdcvetwik+TexU=\");\n\n_c = StateChart;\nexport default _c2 = /*#__PURE__*/memo(StateChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StateChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/StateChart.js"],"names":["React","memo","useEffect","useState","ZoomableGroup","ComposableMap","Geographies","Geography","Axios","geoUrl","startDate","Date","StateChart","props","data","setData","loading","setLoading","date","setDate","toLocaleDateString","year","month","day","get","params","then","response","map","geographies","geo","NAME","properties","name","state","find","o","AdminRegion1","setTooltipContent","Confirmed","default","fill","outline","hover","pressed","rsmKey"],"mappings":"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","sourcesContent":["import React, {memo, useEffect, useState} from \"react\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\nimport Axios from 'axios';\r\n\r\nconst geoUrl = \"https://gist.githubusercontent.com/mheydt/29eec003a4c0af362d7a/raw/d27d143bd75626647108fc514d8697e0814bf74b/us-states.json\";\r\nconst startDate = new Date(2020,0,23);\r\n\r\nconst StateChart = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [date, setDate] = useState(startDate.toLocaleDateString(\"en-US\", {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    }));\r\n\r\n\r\n    if (props.date != date){\r\n        setDate(props.date);\r\n        Axios.get(\"http://localhost:5000/State\", { params: {date: date}}).then((response) =>{\r\n            setData(response.data);\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n /*   useEffect(() => {\r\n        Axios.get(\"http://localhost:5000/State\", { params: {date: date}}).then((response) =>{\r\n            setData(response.data);\r\n            setLoading(false);\r\n        });\r\n    }, []);*/\r\n\r\n\r\n    if(props.map === \"State\"){\r\n        return (\r\n            <>\r\n                <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" width={800} height={600}>\r\n                    <ZoomableGroup zoom={1}>>\r\n                        <Geographies geography={geoUrl}>\r\n                            {({ geographies }) =>\r\n                                geographies.map(geo => (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        onMouseEnter={() => {\r\n                                            const NAME = geo.properties.name;\r\n                                            const state= data.find(o => o.AdminRegion1 === NAME);\r\n                                            if(loading){\r\n                                                props.setTooltipContent('Data is loading')\r\n                                            }else{\r\n                                                if (state){\r\n                                                    props.setTooltipContent(`${geo.properties.name}</br>\r\n                                                        Confirmed - ${state.Confirmed}</br>`);\r\n                                                } else {\r\n                                                    props.setTooltipContent(`${geo.properties.name}</br>\r\n                                                        Confirmed - 0</br>`);\r\n                                                }\r\n\r\n                                            }\r\n                                        }}\r\n                                        onMouseLeave={() => {\r\n                                            props.setTooltipContent(\"\");\r\n                                        }}\r\n                                        style={{\r\n                                            default: {\r\n                                                fill: \"#D6D6DA\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            hover: {\r\n                                                fill: \"#F53\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            pressed: {\r\n                                                fill: \"#E42\",\r\n                                                outline: \"none\"\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </Geographies>\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </>\r\n        );\r\n    }else{\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default memo(StateChart);\r\n"]},"metadata":{},"sourceType":"module"}