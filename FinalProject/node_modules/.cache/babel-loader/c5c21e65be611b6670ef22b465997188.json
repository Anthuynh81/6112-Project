{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\CountyChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport Axios from 'axios';\nimport ReactTooltip from \"react-tooltip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nconst startDate = new Date(2020, 0, 23);\n\nconst CountyChart = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [date, setDate] = useState(startDate.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  }));\n\n  if (props.date !== date) {\n    setLoading(true);\n    setDate(props.date);\n  }\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:5000/County\", {\n      params: {\n        date: date\n      }\n    }).then(response => {\n      console.log(response);\n      setData(response.data);\n      setLoading(false);\n    });\n  }, [date]);\n\n  if (props.map === \"County\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ComposableMap, {\n        \"data-tip\": \"\",\n        projection: \"geoAlbersUsa\",\n        width: 800,\n        height: 600,\n        children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n          zoom: 1,\n          children: [\">\", /*#__PURE__*/_jsxDEV(Geographies, {\n            geography: geoUrl,\n            children: _ref => {\n              let {\n                geographies\n              } = _ref;\n              return geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n                geography: geo,\n                onMouseEnter: () => {\n                  const NAME = geo.properties.name;\n                  const state = data.find(o => o.AdminRegion2 === NAME);\n\n                  if (loading) {\n                    props.setTooltipContent('Data is loading');\n                  } else {\n                    if (state) {\n                      props.setTooltipContent(`${geo.properties.name}</br>\n                                                        Confirmed - ${state.Confirmed}</br>`);\n                    } else {\n                      props.setTooltipContent(`${geo.properties.name}</br>\n                                                        Confirmed - 0</br>`);\n                    }\n                  }\n                },\n                onMouseLeave: () => {\n                  props.setTooltipContent(\"\");\n                },\n                style: {\n                  default: {\n                    fill: \"#D6D6DA\",\n                    outline: \"none\"\n                  },\n                  hover: {\n                    fill: \"#F53\",\n                    outline: \"none\"\n                  },\n                  pressed: {\n                    fill: \"#E42\",\n                    outline: \"none\"\n                  }\n                }\n              }, geo.rsmKey, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 37\n              }, this));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        html: true,\n        children: props.toolTip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  } else {\n    return null;\n  }\n};\n\n_s(CountyChart, \"xR85v71ro+XvJ318rmDSlY3rwys=\");\n\n_c = CountyChart;\nexport default _c2 = /*#__PURE__*/memo(CountyChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountyChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/CountyChart.js"],"names":["React","memo","useEffect","useState","ZoomableGroup","ComposableMap","Geographies","Geography","Axios","ReactTooltip","geoUrl","startDate","Date","CountyChart","props","data","setData","loading","setLoading","date","setDate","toLocaleDateString","year","month","day","get","params","then","response","console","log","map","geographies","geo","NAME","properties","name","state","find","o","AdminRegion2","setTooltipContent","Confirmed","default","fill","outline","hover","pressed","rsmKey","toolTip"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,IAAf,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SACIC,aADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,SAJJ,QAKO,mBALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;;AAEA,MAAMC,MAAM,GAAG,2DAAf;AACA,MAAMC,SAAS,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,EAAhB,CAAlB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAACQ,SAAS,CAACU,kBAAV,CAA6B,OAA7B,EAAsC;AACnEC,IAAAA,IAAI,EAAE,SAD6D;AAEnEC,IAAAA,KAAK,EAAE,SAF4D;AAGnEC,IAAAA,GAAG,EAAE;AAH8D,GAAtC,CAAD,CAAhC;;AAMA,MAAIV,KAAK,CAACK,IAAN,KAAeA,IAAnB,EAAwB;AACpBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,OAAO,CAACN,KAAK,CAACK,IAAP,CAAP;AACH;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,KAAK,CAACiB,GAAN,CAAU,8BAAV,EAA0C;AAAEC,MAAAA,MAAM,EAAE;AAACP,QAAAA,IAAI,EAAEA;AAAP;AAAV,KAA1C,EAAmEQ,IAAnE,CAAyEC,QAAD,IAAa;AACjFC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAZ,MAAAA,OAAO,CAACY,QAAQ,CAACb,IAAV,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACC,KAJL;AAKH,GANQ,EAMN,CAACC,IAAD,CANM,CAAT;;AAQA,MAAGL,KAAK,CAACiB,GAAN,KAAc,QAAjB,EAA0B;AACtB,wBACI;AAAA,8BACI,QAAC,aAAD;AAAe,oBAAS,EAAxB;AAA2B,QAAA,UAAU,EAAC,cAAtC;AAAqD,QAAA,KAAK,EAAE,GAA5D;AAAiE,QAAA,MAAM,EAAE,GAAzE;AAAA,+BACI,QAAC,aAAD;AAAe,UAAA,IAAI,EAAE,CAArB;AAAA,uCACI,QAAC,WAAD;AAAa,YAAA,SAAS,EAAErB,MAAxB;AAAA,sBACK;AAAA,kBAAC;AAAEsB,gBAAAA;AAAF,eAAD;AAAA,qBACGA,WAAW,CAACD,GAAZ,CAAgBE,GAAG,iBACf,QAAC,SAAD;AAEI,gBAAA,SAAS,EAAEA,GAFf;AAGI,gBAAA,YAAY,EAAE,MAAM;AAChB,wBAAMC,IAAI,GAAGD,GAAG,CAACE,UAAJ,CAAeC,IAA5B;AACA,wBAAMC,KAAK,GAAGtB,IAAI,CAACuB,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACC,YAAF,KAAmBN,IAAlC,CAAd;;AACA,sBAAGjB,OAAH,EAAW;AACPH,oBAAAA,KAAK,CAAC2B,iBAAN,CAAwB,iBAAxB;AACH,mBAFD,MAEK;AACD,wBAAIJ,KAAJ,EAAU;AACNvB,sBAAAA,KAAK,CAAC2B,iBAAN,CAAyB,GAAER,GAAG,CAACE,UAAJ,CAAeC,IAAK;AACnG,sEAAsEC,KAAK,CAACK,SAAU,OADlC;AAEH,qBAHD,MAGO;AACH5B,sBAAAA,KAAK,CAAC2B,iBAAN,CAAyB,GAAER,GAAG,CAACE,UAAJ,CAAeC,IAAK;AACnG,2EADoD;AAEH;AAEJ;AACJ,iBAlBL;AAmBI,gBAAA,YAAY,EAAE,MAAM;AAChBtB,kBAAAA,KAAK,CAAC2B,iBAAN,CAAwB,EAAxB;AACH,iBArBL;AAsBI,gBAAA,KAAK,EAAE;AACHE,kBAAAA,OAAO,EAAE;AACLC,oBAAAA,IAAI,EAAE,SADD;AAELC,oBAAAA,OAAO,EAAE;AAFJ,mBADN;AAKHC,kBAAAA,KAAK,EAAE;AACHF,oBAAAA,IAAI,EAAE,MADH;AAEHC,oBAAAA,OAAO,EAAE;AAFN,mBALJ;AASHE,kBAAAA,OAAO,EAAE;AACLH,oBAAAA,IAAI,EAAE,MADD;AAELC,oBAAAA,OAAO,EAAE;AAFJ;AATN;AAtBX,iBACSZ,GAAG,CAACe,MADb;AAAA;AAAA;AAAA;AAAA,sBADJ,CADH;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,kBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAgDI,QAAC,YAAD;AAAc,QAAA,IAAI,EAAE,IAApB;AAAA,kBAA2BlC,KAAK,CAACmC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAhDJ;AAAA,oBADJ;AAoDH,GArDD,MAqDK;AACD,WAAO,IAAP;AACH;AAEJ,CA/ED;;GAAMpC,W;;KAAAA,W;AAiFN,kCAAeZ,IAAI,CAACY,WAAD,CAAnB","sourcesContent":["import React, {memo, useEffect, useState} from \"react\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\nimport Axios from 'axios';\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\nconst startDate = new Date(2020,0,23);\r\n\r\nconst CountyChart = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [date, setDate] = useState(startDate.toLocaleDateString(\"en-US\", {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    }));\r\n\r\n    if (props.date !== date){\r\n        setLoading(true);\r\n        setDate(props.date);\r\n    }\r\n\r\n    useEffect(() => {\r\n        Axios.get(\"http://localhost:5000/County\", { params: {date: date}}).then((response) =>{\r\n            console.log(response)\r\n            setData(response.data)\r\n            setLoading(false);\r\n            });\r\n    }, [date]);\r\n\r\n    if(props.map === \"County\"){\r\n        return (\r\n            <>\r\n                <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\" width={800} height={600}>\r\n                    <ZoomableGroup zoom={1}>>\r\n                        <Geographies geography={geoUrl}>\r\n                            {({ geographies }) =>\r\n                                geographies.map(geo => (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        geography={geo}\r\n                                        onMouseEnter={() => {\r\n                                            const NAME = geo.properties.name;\r\n                                            const state = data.find(o => o.AdminRegion2 === NAME);\r\n                                            if(loading){\r\n                                                props.setTooltipContent('Data is loading')\r\n                                            }else{\r\n                                                if (state){\r\n                                                    props.setTooltipContent(`${geo.properties.name}</br>\r\n                                                        Confirmed - ${state.Confirmed}</br>`);\r\n                                                } else {\r\n                                                    props.setTooltipContent(`${geo.properties.name}</br>\r\n                                                        Confirmed - 0</br>`);\r\n                                                }\r\n\r\n                                            }\r\n                                        }}\r\n                                        onMouseLeave={() => {\r\n                                            props.setTooltipContent(\"\");\r\n                                        }}\r\n                                        style={{\r\n                                            default: {\r\n                                                fill: \"#D6D6DA\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            hover: {\r\n                                                fill: \"#F53\",\r\n                                                outline: \"none\"\r\n                                            },\r\n                                            pressed: {\r\n                                                fill: \"#E42\",\r\n                                                outline: \"none\"\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </Geographies>\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n                <ReactTooltip html={true}>{props.toolTip}</ReactTooltip>\r\n            </>\r\n        );\r\n    }else{\r\n        return null;\r\n    }\r\n\r\n};\r\n\r\nexport default memo(CountyChart);\r\n"]},"metadata":{},"sourceType":"module"}