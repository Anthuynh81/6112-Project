{"ast":null,"code":"(function (GeoJSON) {\n  GeoJSON.version = '0.5.0'; // Allow user to specify default parameters\n\n  GeoJSON.defaults = {\n    doThrows: {\n      invalidGeometry: false\n    }\n  };\n\n  function InvalidGeometryError() {\n    var args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];\n    var item = args.shift();\n    var params = args.shift();\n    Error.apply(this, args);\n    this.message = this.message || \"Invalid Geometry: \" + 'item: ' + JSON.stringify(item) + ', params: ' + JSON.stringify(params);\n  }\n\n  InvalidGeometryError.prototype = Error;\n  GeoJSON.errors = {\n    InvalidGeometryError: InvalidGeometryError\n  }; //exposing so this can be overriden maybe by geojson-validation or the like\n\n  GeoJSON.isGeometryValid = function (geometry) {\n    if (!geometry || !Object.keys(geometry).length) return false;\n    return !!geometry.type && !!geometry.coordinates && Array.isArray(geometry.coordinates) && !!geometry.coordinates.length;\n  }; // The one and only public function.\n  // Converts an array of objects into a GeoJSON feature collection\n\n\n  GeoJSON.parse = function (objects, params, callback) {\n    var geojson,\n        settings = applyDefaults(params, this.defaults),\n        propFunc;\n    geomAttrs.length = 0; // Reset the list of geometry fields\n\n    setGeom(settings);\n    propFunc = getPropFunction(settings);\n\n    if (Array.isArray(objects)) {\n      geojson = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      };\n      objects.forEach(function (item) {\n        geojson.features.push(getFeature({\n          item: item,\n          params: settings,\n          propFunc: propFunc\n        }));\n      });\n      addOptionals(geojson, settings);\n    } else {\n      geojson = getFeature({\n        item: objects,\n        params: settings,\n        propFunc: propFunc\n      });\n      addOptionals(geojson, settings);\n    }\n\n    if (callback && typeof callback === 'function') {\n      callback(geojson);\n    } else {\n      return geojson;\n    }\n  }; // Helper functions\n\n\n  var geoms = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeoJSON'],\n      geomAttrs = []; // Adds default settings to user-specified params\n  // Does not overwrite any settings--only adds defaults\n  // the the user did not specify\n\n  function applyDefaults(params, defaults) {\n    var settings = params || {};\n\n    for (var setting in defaults) {\n      if (defaults.hasOwnProperty(setting) && !settings[setting]) {\n        settings[setting] = defaults[setting];\n      }\n    }\n\n    return settings;\n  } // Adds the optional GeoJSON properties crs and bbox\n  // if they have been specified\n\n\n  function addOptionals(geojson, settings) {\n    if (settings.crs && checkCRS(settings.crs)) {\n      if (settings.isPostgres) geojson.geometry.crs = settings.crs;else geojson.crs = settings.crs;\n    }\n\n    if (settings.bbox) {\n      geojson.bbox = settings.bbox;\n    }\n\n    if (settings.extraGlobal) {\n      geojson.properties = {};\n\n      for (var key in settings.extraGlobal) {\n        geojson.properties[key] = settings.extraGlobal[key];\n      }\n    }\n  } // Verify that the structure of CRS object is valid\n\n\n  function checkCRS(crs) {\n    if (crs.type === 'name') {\n      if (crs.properties && crs.properties.name) {\n        return true;\n      } else {\n        throw new Error('Invalid CRS. Properties must contain \"name\" key');\n      }\n    } else if (crs.type === 'link') {\n      if (crs.properties && crs.properties.href && crs.properties.type) {\n        return true;\n      } else {\n        throw new Error('Invalid CRS. Properties must contain \"href\" and \"type\" key');\n      }\n    } else {\n      throw new Error('Invald CRS. Type attribute must be \"name\" or \"link\"');\n    }\n  } // Moves the user-specified geometry parameters\n  // under the `geom` key in param for easier access\n\n\n  function setGeom(params) {\n    params.geom = {};\n\n    for (var param in params) {\n      if (params.hasOwnProperty(param) && geoms.indexOf(param) !== -1) {\n        params.geom[param] = params[param];\n        delete params[param];\n      }\n    }\n\n    setGeomAttrList(params.geom);\n  } // Adds fields which contain geometry data\n  // to geomAttrs. This list is used when adding\n  // properties to the features so that no geometry\n  // fields are added the properties key\n\n\n  function setGeomAttrList(params) {\n    for (var param in params) {\n      if (params.hasOwnProperty(param)) {\n        if (typeof params[param] === 'string') {\n          geomAttrs.push(params[param]);\n        } else if (typeof params[param] === 'object') {\n          // Array of coordinates for Point\n          geomAttrs.push(params[param][0]);\n          geomAttrs.push(params[param][1]);\n        }\n      }\n    }\n\n    if (geomAttrs.length === 0) {\n      throw new Error('No geometry attributes specified');\n    }\n  } // Creates a feature object to be added\n  // to the GeoJSON features array\n\n\n  function getFeature(args) {\n    var item = args.item,\n        params = args.params,\n        propFunc = args.propFunc;\n    var feature = {\n      \"type\": \"Feature\"\n    };\n    feature.geometry = buildGeom(item, params);\n    feature.properties = propFunc.call(item);\n    return feature;\n  }\n\n  function isNested(val) {\n    return /^.+\\..+$/.test(val);\n  } // Assembles the `geometry` property\n  // for the feature output\n\n\n  function buildGeom(item, params) {\n    var geom = {},\n        attr;\n\n    for (var gtype in params.geom) {\n      var val = params.geom[gtype]; // Geometry parameter specified as: {Point: 'coords'}\n\n      if (typeof val === 'string' && item.hasOwnProperty(val)) {\n        if (gtype === 'GeoJSON') {\n          geom = item[val];\n        } else {\n          geom.type = gtype;\n          geom.coordinates = item[val];\n        }\n      }\n      /* Handle things like:\n      Polygon: {\n        northeast: ['lat', 'lng'],\n        southwest: ['lat', 'lng']\n      }\n      */\n      else if (typeof val === 'object' && !Array.isArray(val)) {\n        /*jshint loopfunc: true */\n        var points = Object.keys(val).map(function (key) {\n          var order = val[key];\n          var newItem = item[key];\n          return buildGeom(newItem, {\n            geom: {\n              Point: order\n            }\n          });\n        });\n        geom.type = gtype;\n        /*jshint loopfunc: true */\n\n        geom.coordinates = [].concat(points.map(function (p) {\n          return p.coordinates;\n        }));\n      } // Geometry parameter specified as: {Point: ['lat', 'lng']}\n      else if (Array.isArray(val) && item.hasOwnProperty(val[0]) && item.hasOwnProperty(val[1])) {\n        geom.type = gtype;\n        geom.coordinates = [Number(item[val[1]]), Number(item[val[0]])];\n      } // Geometry parameter specified as: {Point: ['container.lat', 'container.lng']}\n      else if (Array.isArray(val) && isNested(val[0]) && isNested(val[1])) {\n        var coordinates = [];\n\n        for (var i = 0; i < val.length; i++) {\n          // i.e. 0 and 1\n          var paths = val[i].split('.');\n          var itemClone = item;\n\n          for (var j = 0; j < paths.length; j++) {\n            if (!itemClone.hasOwnProperty(paths[j])) {\n              return false;\n            }\n\n            itemClone = itemClone[paths[j]]; // Iterate deeper into the object\n          }\n\n          coordinates[i] = itemClone;\n        }\n\n        geom.type = gtype;\n        geom.coordinates = [Number(coordinates[1]), Number(coordinates[0])];\n      }\n    }\n\n    if (params.doThrows && params.doThrows.invalidGeometry && !GeoJSON.isGeometryValid(geom)) {\n      throw new InvalidGeometryError(item, params);\n    }\n\n    return geom;\n  } // Returns the function to be used to\n  // build the properties object for each feature\n\n\n  function getPropFunction(params) {\n    var func;\n\n    if (!params.exclude && !params.include) {\n      func = function (properties) {\n        for (var attr in this) {\n          if (this.hasOwnProperty(attr) && geomAttrs.indexOf(attr) === -1) {\n            properties[attr] = this[attr];\n          }\n        }\n      };\n    } else if (params.include) {\n      func = function (properties) {\n        params.include.forEach(function (attr) {\n          properties[attr] = this[attr];\n        }, this);\n      };\n    } else if (params.exclude) {\n      func = function (properties) {\n        for (var attr in this) {\n          if (this.hasOwnProperty(attr) && geomAttrs.indexOf(attr) === -1 && params.exclude.indexOf(attr) === -1) {\n            properties[attr] = this[attr];\n          }\n        }\n      };\n    }\n\n    return function () {\n      var properties = {};\n      func.call(this, properties);\n\n      if (params.extra) {\n        addExtra(properties, params.extra);\n      }\n\n      return properties;\n    };\n  } // Adds data contained in the `extra`\n  // parameter if it has been specified\n\n\n  function addExtra(properties, extra) {\n    for (var key in extra) {\n      if (extra.hasOwnProperty(key)) {\n        properties[key] = extra[key];\n      }\n    }\n\n    return properties;\n  }\n})(typeof module == 'object' ? module.exports : window.GeoJSON = {});","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/node_modules/geojson/geojson.js"],"names":["GeoJSON","version","defaults","doThrows","invalidGeometry","InvalidGeometryError","args","arguments","length","slice","call","item","shift","params","Error","apply","message","JSON","stringify","prototype","errors","isGeometryValid","geometry","Object","keys","type","coordinates","Array","isArray","parse","objects","callback","geojson","settings","applyDefaults","propFunc","geomAttrs","setGeom","getPropFunction","forEach","features","push","getFeature","addOptionals","geoms","setting","hasOwnProperty","crs","checkCRS","isPostgres","bbox","extraGlobal","properties","key","name","href","geom","param","indexOf","setGeomAttrList","feature","buildGeom","isNested","val","test","attr","gtype","points","map","order","newItem","Point","concat","p","Number","i","paths","split","itemClone","j","func","exclude","include","extra","addExtra","module","exports","window"],"mappings":"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","sourcesContent":["(function(GeoJSON) {\n  GeoJSON.version = '0.5.0';\n\n  // Allow user to specify default parameters\n  GeoJSON.defaults = {\n    doThrows: {\n      invalidGeometry: false\n    }\n  };\n\n  function InvalidGeometryError() {\n    var args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];\n    var item = args.shift();\n    var params = args.shift();\n\n    Error.apply(this, args);\n    this.message = this.message || \"Invalid Geometry: \" + 'item: ' + JSON.stringify(item) + ', params: ' + JSON.stringify(params);\n  }\n\n  InvalidGeometryError.prototype = Error;\n\n\n  GeoJSON.errors = {\n    InvalidGeometryError: InvalidGeometryError\n  };\n\n  //exposing so this can be overriden maybe by geojson-validation or the like\n  GeoJSON.isGeometryValid = function(geometry){\n    if(!geometry || !Object.keys(geometry).length)\n      return false;\n\n    return !!geometry.type && !!geometry.coordinates && Array.isArray(geometry.coordinates) && !!geometry.coordinates.length;\n  };\n\n  // The one and only public function.\n  // Converts an array of objects into a GeoJSON feature collection\n  GeoJSON.parse = function(objects, params, callback) {\n    var geojson,\n        settings = applyDefaults(params, this.defaults),\n        propFunc;\n\n    geomAttrs.length = 0; // Reset the list of geometry fields\n    setGeom(settings);\n    propFunc = getPropFunction(settings);\n\n    if (Array.isArray(objects)) {\n      geojson = {\"type\": \"FeatureCollection\", \"features\": []};\n      objects.forEach(function(item){\n        geojson.features.push(getFeature({item:item, params: settings, propFunc:propFunc}));\n      });\n      addOptionals(geojson, settings);\n    } else {\n      geojson = getFeature({item:objects, params: settings, propFunc:propFunc});\n      addOptionals(geojson, settings);\n    }\n\n    if (callback && typeof callback === 'function') {\n      callback(geojson);\n    } else {\n      return geojson;\n    }\n  };\n\n  // Helper functions\n  var geoms = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeoJSON'],\n      geomAttrs = [];\n\n  // Adds default settings to user-specified params\n  // Does not overwrite any settings--only adds defaults\n  // the the user did not specify\n  function applyDefaults(params, defaults) {\n    var settings = params || {};\n\n    for(var setting in defaults) {\n      if(defaults.hasOwnProperty(setting) && !settings[setting]) {\n        settings[setting] = defaults[setting];\n      }\n    }\n\n    return settings;\n  }\n\n  // Adds the optional GeoJSON properties crs and bbox\n  // if they have been specified\n  function addOptionals(geojson, settings){\n    if(settings.crs && checkCRS(settings.crs)) {\n      if(settings.isPostgres)\n        geojson.geometry.crs = settings.crs;\n      else\n        geojson.crs = settings.crs;\n    }\n    if (settings.bbox) {\n      geojson.bbox = settings.bbox;\n    }\n    if (settings.extraGlobal) {\n      geojson.properties = {};\n      for (var key in settings.extraGlobal) {\n        geojson.properties[key] = settings.extraGlobal[key];\n      }\n    }\n  }\n\n  // Verify that the structure of CRS object is valid\n  function checkCRS(crs) {\n    if (crs.type === 'name') {\n        if (crs.properties && crs.properties.name) {\n            return true;\n        } else {\n            throw new Error('Invalid CRS. Properties must contain \"name\" key');\n        }\n    } else if (crs.type === 'link') {\n        if (crs.properties && crs.properties.href && crs.properties.type) {\n            return true;\n        } else {\n            throw new Error('Invalid CRS. Properties must contain \"href\" and \"type\" key');\n        }\n    } else {\n        throw new Error('Invald CRS. Type attribute must be \"name\" or \"link\"');\n    }\n  }\n\n  // Moves the user-specified geometry parameters\n  // under the `geom` key in param for easier access\n  function setGeom(params) {\n    params.geom = {};\n\n    for(var param in params) {\n      if(params.hasOwnProperty(param) && geoms.indexOf(param) !== -1){\n        params.geom[param] = params[param];\n        delete params[param];\n      }\n    }\n\n    setGeomAttrList(params.geom);\n  }\n\n  // Adds fields which contain geometry data\n  // to geomAttrs. This list is used when adding\n  // properties to the features so that no geometry\n  // fields are added the properties key\n  function setGeomAttrList(params) {\n    for(var param in params) {\n      if(params.hasOwnProperty(param)) {\n        if(typeof params[param] === 'string') {\n          geomAttrs.push(params[param]);\n        } else if (typeof params[param] === 'object') { // Array of coordinates for Point\n          geomAttrs.push(params[param][0]);\n          geomAttrs.push(params[param][1]);\n        }\n      }\n    }\n\n    if(geomAttrs.length === 0) { throw new Error('No geometry attributes specified'); }\n  }\n\n  // Creates a feature object to be added\n  // to the GeoJSON features array\n  function getFeature(args) {\n    var item = args.item,\n      params = args.params,\n      propFunc = args.propFunc;\n\n    var feature = { \"type\": \"Feature\" };\n\n    feature.geometry = buildGeom(item, params);\n    feature.properties = propFunc.call(item);\n\n    return feature;\n  }\n\n  function isNested(val){\n    return (/^.+\\..+$/.test(val));\n  }\n\n  // Assembles the `geometry` property\n  // for the feature output\n  function buildGeom(item, params) {\n    var geom = {},\n        attr;\n\n    for(var gtype in params.geom) {\n      var val = params.geom[gtype];\n\n      // Geometry parameter specified as: {Point: 'coords'}\n      if(typeof val === 'string' && item.hasOwnProperty(val)) {\n        if(gtype === 'GeoJSON') {\n          geom = item[val];\n        } else {\n          geom.type = gtype;\n          geom.coordinates = item[val];\n        }\n      }\n\n      /* Handle things like:\n      Polygon: {\n        northeast: ['lat', 'lng'],\n        southwest: ['lat', 'lng']\n      }\n      */\n      else if(typeof val === 'object' && !Array.isArray(val)) {\n        /*jshint loopfunc: true */\n        var points = Object.keys(val).map(function(key){\n          var order = val[key];\n          var newItem = item[key];\n          return buildGeom(newItem, {geom:{ Point: order}});\n        });\n        geom.type = gtype;\n        /*jshint loopfunc: true */\n        geom.coordinates = [].concat(points.map(function(p){\n          return p.coordinates;\n        }));\n      }\n\n      // Geometry parameter specified as: {Point: ['lat', 'lng']}\n      else if(Array.isArray(val) && item.hasOwnProperty(val[0]) && item.hasOwnProperty(val[1])){\n        geom.type = gtype;\n        geom.coordinates = [Number(item[val[1]]), Number(item[val[0]])];\n      }\n\n      // Geometry parameter specified as: {Point: ['container.lat', 'container.lng']}\n      else if(Array.isArray(val) && isNested(val[0]) && isNested(val[1])){\n        var coordinates = [];\n        for (var i = 0; i < val.length; i++) {\t// i.e. 0 and 1\n          var paths = val[i].split('.');\n          var itemClone = item;\n          for (var j = 0; j < paths.length; j++) {\n            if (!itemClone.hasOwnProperty(paths[j])) {\n              return false;\n            }\n            itemClone = itemClone[paths[j]];\t// Iterate deeper into the object\n          }\n          coordinates[i] = itemClone;\n        }\n        geom.type = gtype;\n        geom.coordinates = [Number(coordinates[1]), Number(coordinates[0])];\n      }\n    }\n\n    if(params.doThrows && params.doThrows.invalidGeometry && !GeoJSON.isGeometryValid(geom)){\n      throw new InvalidGeometryError(item, params);\n    }\n\n    return geom;\n  }\n\n  // Returns the function to be used to\n  // build the properties object for each feature\n  function getPropFunction(params) {\n    var func;\n\n    if(!params.exclude && !params.include) {\n      func = function(properties) {\n        for(var attr in this) {\n          if(this.hasOwnProperty(attr) && (geomAttrs.indexOf(attr) === -1)) {\n            properties[attr] = this[attr];\n          }\n        }\n      };\n    } else if(params.include) {\n      func = function(properties) {\n        params.include.forEach(function(attr){\n          properties[attr] = this[attr];\n        }, this);\n      };\n    } else if(params.exclude) {\n      func = function(properties) {\n        for(var attr in this) {\n          if(this.hasOwnProperty(attr) && (geomAttrs.indexOf(attr) === -1) && (params.exclude.indexOf(attr) === -1)) {\n            properties[attr] = this[attr];\n          }\n        }\n      };\n    }\n\n    return function() {\n      var properties = {};\n\n      func.call(this, properties);\n\n      if(params.extra) { addExtra(properties, params.extra); }\n      return properties;\n    };\n  }\n\n  // Adds data contained in the `extra`\n  // parameter if it has been specified\n  function addExtra(properties, extra) {\n    for(var key in extra){\n      if(extra.hasOwnProperty(key)) {\n        properties[key] = extra[key];\n      }\n    }\n\n    return properties;\n  }\n\n}(typeof module == 'object' ? module.exports : window.GeoJSON = {}));\n"]},"metadata":{},"sourceType":"script"}