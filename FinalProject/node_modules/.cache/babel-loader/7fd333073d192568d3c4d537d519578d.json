{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cyber\\\\WebstormProjects\\\\6112 Project\\\\6112 Project\\\\FinalProject\\\\src\\\\usaVIS.js\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst usaVIS = ({\n  usadata\n}) => {\n  document.getElementById(\"slider\").value = 0;\n  let width = 1400;\n  let height = 600;\n  const niceFormat = d3.utcFormat(\"%B %d, %Y\");\n  const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\n  const dataParse = d3.utcParse(\"%m/%d/%Y\");\n  const startDate = dataParse(\"01/21/2020\");\n  const millisecondsPerDay = 24 * 60 * 60 * 1000;\n  const valRange = [0, 5500000, 8500000];\n  const rateType = \"Confirmed\";\n  const slider = d3.select(\"#slider\").on(\"input\", function () {\n    var date = new Date(+startDate + millisecondsPerDay * this.value);\n    update(date);\n  });\n  const colormap = d3.scaleLinear().domain(valRange).range([\"blue\", \"#eeeeee\", \"red\"]);\n  const svg = d3.select(\"#mapsvg_pr\");\n  /*const tool_tip = d3.tip().attr(\"class\", \"d3-tip\").offset([-8, 0]);*/\n\n  let allStats;\n  Promise.all([d3.json(\"custom.geo.json\"), usadata]).then(ready);\n\n  function ready(data) {\n    const us = data[0];\n    allStats = data[1].map(function (row, i) {\n      return {\n        Updated: dataParse(row.Updated),\n        Country_Region: row.Country_Region,\n        Confirmed: row.Confirmed,\n        ConfirmedChange: row.ConfirmedChange,\n        Deaths: row.Deaths,\n        DeathsChange: row.DeathsChange\n      };\n    });\n    const availableDays = (d3.max(allStats, function (d) {\n      return d.Updated;\n    }) - startDate) / millisecondsPerDay;\n    slider.attr(\"max\", Math.round(availableDays));\n    render(us);\n    update(startDate);\n  }\n\n  function getStateMetrics(stats, state_name) {\n    for (var i = 0; i < stats.length; i++) {\n      if (stats[i].Country_Region === state_name) {\n        return stats[i];\n      }\n    }\n  }\n\n  function render(us) {\n    const projection = d3.geoAlbersUsa().translate([width / 2, height / 2]).scale([1280]);\n    const path = d3.geoPath().projection(projection);\n    /*svg.call(tool_tip);\r\n    */\n\n    svg.append(\"g\").attr(\"class\", \"states\").attr(\"class\", \"state-borders\").selectAll(\"path\").data(us.features.filter(function (d) {\n      return d.properties.name !== \"Puerto Rico\";\n    })).enter().append(\"path\")\n    /*.on(\"mouseover\", tool_tip.show)\r\n    .on(\"mouseout\", tool_tip.hide)*/\n    .attr(\"d\", path);\n  }\n  /*    var zoom = d3.zoom()\r\n          .scaleExtent([1, 2])\r\n          .on('zoom', function() {\r\n              svg.selectAll('path')\r\n                  .attr('transform', d3.event.transform);\r\n          });\r\n  \r\n  \r\n      svg.call(zoom)\r\n  \r\n  \r\n      svg.call(zoom.transform, d3.zoomIdentity.scale(1));*/\n\n\n  function update(date) {\n    const stats = allStats.filter(function (row, i) {\n      return +row.Updated === +date;\n    });\n    d3.select(\"#date\").text(niceFormat(date));\n    /*tool_tip.html(function (d, i) {\r\n        const stateMetrics = getStateMetrics(stats, d.properties.name);\r\n        let html =\r\n            \"<table>\" +\r\n            \"<tr><th>Confirmed Cases:</th><td>\" +\r\n            stateMetrics.Confirmed +\r\n            \"</td></tr>\" +\r\n              \"<tr><th>Changes in Confirmed Cases:</th><td>\" +\r\n            stateMetrics.ConfirmedChange +\r\n            \"</td></tr>\" +\r\n              \"<tr><th>Deaths:</th><td>\" +\r\n            stateMetrics.Deaths +\r\n            \"</td></tr>\" +\r\n              \"<tr><th>Changes in Deaths :</th><td>\" +\r\n            stateMetrics.DeathsChange +\r\n            \"</td></tr>\" +\r\n            \"</table>\";\r\n        return html;\r\n    });*/\n\n    svg.selectAll(\"path\").attr(\"fill\", function (d) {\n      const metrics = getStateMetrics(stats, d.properties.name);\n      if (metrics === undefined) return \"#ddd\";\n      const rate = getStateMetrics(stats, d.properties.name)[rateType];\n      return colormap(rate);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    id: \"mapsvg_pr\",\n    className: \"map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 12\n  }, this);\n};\n\nexport default usaVIS;","map":{"version":3,"sources":["C:/Users/Cyber/WebstormProjects/6112 Project/6112 Project/FinalProject/src/usaVIS.js"],"names":["d3","usaVIS","usadata","document","getElementById","value","width","height","niceFormat","utcFormat","dataFormat","dataParse","utcParse","startDate","millisecondsPerDay","valRange","rateType","slider","select","on","date","Date","update","colormap","scaleLinear","domain","range","svg","allStats","Promise","all","json","then","ready","data","us","map","row","i","Updated","Country_Region","Confirmed","ConfirmedChange","Deaths","DeathsChange","availableDays","max","d","attr","Math","round","render","getStateMetrics","stats","state_name","length","projection","geoAlbersUsa","translate","scale","path","geoPath","append","selectAll","features","filter","properties","name","enter","text","metrics","undefined","rate"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAC1BC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,GAA0C,CAA1C;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,MAAM,GAAG,GAAb;AAEA,QAAMC,UAAU,GAAGR,EAAE,CAACS,SAAH,CAAa,WAAb,CAAnB;AACA,QAAMC,UAAU,GAAGV,EAAE,CAACS,SAAH,CAAa,UAAb,CAAnB;AACA,QAAME,SAAS,GAAGX,EAAE,CAACY,QAAH,CAAY,UAAZ,CAAlB;AAEA,QAAMC,SAAS,GAAGF,SAAS,CAAC,YAAD,CAA3B;AACA,QAAMG,kBAAkB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA1C;AACA,QAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,OAAJ,EAAa,OAAb,CAAjB;AACA,QAAMC,QAAQ,GAAG,WAAjB;AAEA,QAAMC,MAAM,GAAGjB,EAAE,CAACkB,MAAH,CAAU,SAAV,EAAqBC,EAArB,CAAwB,OAAxB,EAAiC,YAAY;AACxD,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACR,SAAD,GAAaC,kBAAkB,GAAG,KAAKT,KAAhD,CAAX;AACAiB,IAAAA,MAAM,CAACF,IAAD,CAAN;AACH,GAHc,CAAf;AAKA,QAAMG,QAAQ,GAAGvB,EAAE,CACdwB,WADY,GAEZC,MAFY,CAELV,QAFK,EAGZW,KAHY,CAGN,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB,CAHM,CAAjB;AAIA,QAAMC,GAAG,GAAG3B,EAAE,CAACkB,MAAH,CAAU,YAAV,CAAZ;AACA;;AACA,MAAIU,QAAJ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,CACR9B,EAAE,CAAC+B,IAAH,CACI,iBADJ,CADQ,EAIR7B,OAJQ,CAAZ,EAKG8B,IALH,CAKQC,KALR;;AAOA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AAEjB,UAAMC,EAAE,GAAGD,IAAI,CAAC,CAAD,CAAf;AAEAN,IAAAA,QAAQ,GAAGM,IAAI,CAAC,CAAD,CAAJ,CAAQE,GAAR,CAAY,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACrC,aAAO;AACHC,QAAAA,OAAO,EAAE5B,SAAS,CAAC0B,GAAG,CAACE,OAAL,CADf;AAEHC,QAAAA,cAAc,EAAEH,GAAG,CAACG,cAFjB;AAGHC,QAAAA,SAAS,EAAEJ,GAAG,CAACI,SAHZ;AAIHC,QAAAA,eAAe,EAAEL,GAAG,CAACK,eAJlB;AAKHC,QAAAA,MAAM,EAAEN,GAAG,CAACM,MALT;AAMHC,QAAAA,YAAY,EAAEP,GAAG,CAACO;AANf,OAAP;AAQH,KATU,CAAX;AAWA,UAAMC,aAAa,GACf,CAAC7C,EAAE,CAAC8C,GAAH,CAAOlB,QAAP,EAAiB,UAAUmB,CAAV,EAAa;AACvB,aAAOA,CAAC,CAACR,OAAT;AACH,KAFJ,IAGG1B,SAHJ,IAIAC,kBALJ;AAMAG,IAAAA,MAAM,CAAC+B,IAAP,CAAY,KAAZ,EAAmBC,IAAI,CAACC,KAAL,CAAWL,aAAX,CAAnB;AAEAM,IAAAA,MAAM,CAAChB,EAAD,CAAN;AACAb,IAAAA,MAAM,CAACT,SAAD,CAAN;AACH;;AAED,WAASuC,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AACxC,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,KAAK,CAACE,MAA1B,EAAkCjB,CAAC,EAAnC,EAAuC;AACnC,UAAIe,KAAK,CAACf,CAAD,CAAL,CAASE,cAAT,KAA4Bc,UAAhC,EAA4C;AACxC,eAAOD,KAAK,CAACf,CAAD,CAAZ;AACH;AACJ;AACJ;;AAED,WAASa,MAAT,CAAgBhB,EAAhB,EAAoB;AAChB,UAAMqB,UAAU,GAAGxD,EAAE,CAChByD,YADc,GAEdC,SAFc,CAEJ,CAACpD,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAFI,EAGdoD,KAHc,CAGR,CAAC,IAAD,CAHQ,CAAnB;AAKA,UAAMC,IAAI,GAAG5D,EAAE,CAAC6D,OAAH,GAAaL,UAAb,CAAwBA,UAAxB,CAAb;AAEA;AACR;;AACQ7B,IAAAA,GAAG,CACEmC,MADL,CACY,GADZ,EAEKd,IAFL,CAEU,OAFV,EAEmB,QAFnB,EAGKA,IAHL,CAGU,OAHV,EAGmB,eAHnB,EAIKe,SAJL,CAIe,MAJf,EAKK7B,IALL,CAMQC,EAAE,CAAC6B,QAAH,CAAYC,MAAZ,CAAmB,UAAUlB,CAAV,EAAa;AAC5B,aAAOA,CAAC,CAACmB,UAAF,CAAaC,IAAb,KAAsB,aAA7B;AACH,KAFD,CANR,EAUKC,KAVL,GAWKN,MAXL,CAWY,MAXZ;AAYI;AACZ;AAbQ,KAcKd,IAdL,CAcU,GAdV,EAceY,IAdf;AAeH;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGI,WAAStC,MAAT,CAAgBF,IAAhB,EAAsB;AAClB,UAAMiC,KAAK,GAAGzB,QAAQ,CAACqC,MAAT,CAAgB,UAAU5B,GAAV,EAAeC,CAAf,EAAkB;AAC5C,aAAO,CAACD,GAAG,CAACE,OAAL,KAAiB,CAACnB,IAAzB;AACH,KAFa,CAAd;AAIApB,IAAAA,EAAE,CAACkB,MAAH,CAAU,OAAV,EAAmBmD,IAAnB,CAAwB7D,UAAU,CAACY,IAAD,CAAlC;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKQO,IAAAA,GAAG,CAACoC,SAAJ,CAAc,MAAd,EAAsBf,IAAtB,CAA2B,MAA3B,EAAmC,UAAUD,CAAV,EAAa;AAC5C,YAAMuB,OAAO,GAAGlB,eAAe,CAACC,KAAD,EAAQN,CAAC,CAACmB,UAAF,CAAaC,IAArB,CAA/B;AACA,UAAIG,OAAO,KAAKC,SAAhB,EAA2B,OAAO,MAAP;AAC3B,YAAMC,IAAI,GAAGpB,eAAe,CAACC,KAAD,EAAQN,CAAC,CAACmB,UAAF,CAAaC,IAArB,CAAf,CAA0CnD,QAA1C,CAAb;AACA,aAAOO,QAAQ,CAACiD,IAAD,CAAf;AACH,KALD;AAMH;;AAAA;AAED,sBAAO;AAAK,IAAA,EAAE,EAAC,WAAR;AAAoB,IAAA,SAAS,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CArJD;;AAuJA,eAAevE,MAAf","sourcesContent":["import * as d3 from \"d3\";\r\n\r\nconst usaVIS = ({usadata}) => {\r\n    document.getElementById(\"slider\").value = 0;\r\n    let width = 1400\r\n    let height = 600\r\n\r\n    const niceFormat = d3.utcFormat(\"%B %d, %Y\");\r\n    const dataFormat = d3.utcFormat(\"%m/%d/%Y\");\r\n    const dataParse = d3.utcParse(\"%m/%d/%Y\");\r\n\r\n    const startDate = dataParse(\"01/21/2020\");\r\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n    const valRange = [0, 5500000, 8500000];\r\n    const rateType = \"Confirmed\";\r\n\r\n    const slider = d3.select(\"#slider\").on(\"input\", function () {\r\n        var date = new Date(+startDate + millisecondsPerDay * this.value);\r\n        update(date);\r\n    });\r\n\r\n    const colormap = d3\r\n        .scaleLinear()\r\n        .domain(valRange)\r\n        .range([\"blue\", \"#eeeeee\", \"red\"]);\r\n    const svg = d3.select(\"#mapsvg_pr\");\r\n    /*const tool_tip = d3.tip().attr(\"class\", \"d3-tip\").offset([-8, 0]);*/\r\n    let allStats;\r\n\r\n    Promise.all([\r\n        d3.json(\r\n            \"custom.geo.json\"\r\n        ),\r\n        usadata\r\n    ]).then(ready);\r\n\r\n    function ready(data) {\r\n\r\n        const us = data[0];\r\n\r\n        allStats = data[1].map(function (row, i) {\r\n            return {\r\n                Updated: dataParse(row.Updated),\r\n                Country_Region: row.Country_Region,\r\n                Confirmed: row.Confirmed,\r\n                ConfirmedChange: row.ConfirmedChange,\r\n                Deaths: row.Deaths,\r\n                DeathsChange: row.DeathsChange,\r\n            };\r\n        });\r\n\r\n        const availableDays =\r\n            (d3.max(allStats, function (d) {\r\n                    return d.Updated;\r\n                }) -\r\n                startDate) /\r\n            millisecondsPerDay;\r\n        slider.attr(\"max\", Math.round(availableDays));\r\n\r\n        render(us);\r\n        update(startDate);\r\n    }\r\n\r\n    function getStateMetrics(stats, state_name) {\r\n        for (var i = 0; i < stats.length; i++) {\r\n            if (stats[i].Country_Region === state_name) {\r\n                return stats[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function render(us) {\r\n        const projection = d3\r\n            .geoAlbersUsa()\r\n            .translate([width / 2, height / 2])\r\n            .scale([1280]);\r\n\r\n        const path = d3.geoPath().projection(projection);\r\n\r\n        /*svg.call(tool_tip);\r\n*/\r\n        svg\r\n            .append(\"g\")\r\n            .attr(\"class\", \"states\")\r\n            .attr(\"class\", \"state-borders\")\r\n            .selectAll(\"path\")\r\n            .data(\r\n                us.features.filter(function (d) {\r\n                    return d.properties.name !== \"Puerto Rico\";\r\n                })\r\n            )\r\n            .enter()\r\n            .append(\"path\")\r\n            /*.on(\"mouseover\", tool_tip.show)\r\n            .on(\"mouseout\", tool_tip.hide)*/\r\n            .attr(\"d\", path);\r\n    }\r\n\r\n/*    var zoom = d3.zoom()\r\n        .scaleExtent([1, 2])\r\n        .on('zoom', function() {\r\n            svg.selectAll('path')\r\n                .attr('transform', d3.event.transform);\r\n        });\r\n\r\n\r\n    svg.call(zoom)\r\n\r\n\r\n    svg.call(zoom.transform, d3.zoomIdentity.scale(1));*/\r\n\r\n\r\n    function update(date) {\r\n        const stats = allStats.filter(function (row, i) {\r\n            return +row.Updated === +date;\r\n        });\r\n\r\n        d3.select(\"#date\").text(niceFormat(date));\r\n\r\n        /*tool_tip.html(function (d, i) {\r\n            const stateMetrics = getStateMetrics(stats, d.properties.name);\r\n            let html =\r\n                \"<table>\" +\r\n                \"<tr><th>Confirmed Cases:</th><td>\" +\r\n                stateMetrics.Confirmed +\r\n                \"</td></tr>\" +\r\n\r\n                \"<tr><th>Changes in Confirmed Cases:</th><td>\" +\r\n                stateMetrics.ConfirmedChange +\r\n                \"</td></tr>\" +\r\n\r\n                \"<tr><th>Deaths:</th><td>\" +\r\n                stateMetrics.Deaths +\r\n                \"</td></tr>\" +\r\n\r\n                \"<tr><th>Changes in Deaths :</th><td>\" +\r\n                stateMetrics.DeathsChange +\r\n                \"</td></tr>\" +\r\n                \"</table>\";\r\n            return html;\r\n        });*/\r\n\r\n        svg.selectAll(\"path\").attr(\"fill\", function (d) {\r\n            const metrics = getStateMetrics(stats, d.properties.name);\r\n            if (metrics === undefined) return \"#ddd\";\r\n            const rate = getStateMetrics(stats, d.properties.name)[rateType];\r\n            return colormap(rate);\r\n        });\r\n    };\r\n\r\n    return <svg id=\"mapsvg_pr\" className=\"map\"></svg>;\r\n};\r\n\r\nexport default usaVIS;"]},"metadata":{},"sourceType":"module"}